// Code generated by gen, DO NOT EDIT.

package id

import "encoding/json"

// WorkspaceID is an ID for Workspace.
type WorkspaceID ID

// NewWorkspaceID generates a new WorkspaceId.
func NewWorkspaceID() WorkspaceID {
	return WorkspaceID(New())
}

// WorkspaceIDFrom generates a new WorkspaceID from a string.
func WorkspaceIDFrom(i string) (nid WorkspaceID, err error) {
	var did ID
	did, err = FromID(i)
	if err != nil {
		return
	}
	nid = WorkspaceID(did)
	return
}

// MustWorkspaceID generates a new WorkspaceID from a string, but panics if the string cannot be parsed.
func MustWorkspaceID(i string) WorkspaceID {
	did, err := FromID(i)
	if err != nil {
		panic(err)
	}
	return WorkspaceID(did)
}

// WorkspaceIDFromRef generates a new WorkspaceID from a string ref.
func WorkspaceIDFromRef(i *string) *WorkspaceID {
	did := FromIDRef(i)
	if did == nil {
		return nil
	}
	nid := WorkspaceID(*did)
	return &nid
}

// WorkspaceIDFromRefID generates a new WorkspaceID from a ref of a generic ID.
func WorkspaceIDFromRefID(i *ID) *WorkspaceID {
	if i == nil || i.IsNil() {
		return nil
	}
	nid := WorkspaceID(*i)
	return &nid
}

// ID returns a domain ID.
func (d WorkspaceID) ID() ID {
	return ID(d)
}

// String returns a string representation.
func (d WorkspaceID) String() string {
	if d.IsNil() {
		return ""
	}
	return ID(d).String()
}

// StringRef returns a reference of the string representation.
func (d WorkspaceID) RefString() *string {
	if d.IsNil() {
		return nil
	}
	str := d.String()
	return &str
}

// GoString implements fmt.GoStringer interface.
func (d WorkspaceID) GoString() string {
	return "WorkspaceID(" + d.String() + ")"
}

// Ref returns a reference.
func (d WorkspaceID) Ref() *WorkspaceID {
	if d.IsNil() {
		return nil
	}
	d2 := d
	return &d2
}

// Contains returns whether the id is contained in the slice.
func (d WorkspaceID) Contains(ids []WorkspaceID) bool {
	if d.IsNil() {
		return false
	}
	for _, i := range ids {
		if d.ID().Equal(i.ID()) {
			return true
		}
	}
	return false
}

// CopyRef returns a copy of a reference.
func (d *WorkspaceID) CopyRef() *WorkspaceID {
	if d.IsNilRef() {
		return nil
	}
	d2 := *d
	return &d2
}

// IDRef returns a reference of a domain id.
func (d *WorkspaceID) IDRef() *ID {
	if d.IsNilRef() {
		return nil
	}
	id := ID(*d)
	return &id
}

// StringRef returns a reference of a string representation.
func (d *WorkspaceID) StringRef() *string {
	if d.IsNilRef() {
		return nil
	}
	id := ID(*d).String()
	return &id
}

// MarhsalJSON implements json.Marhsaler interface
func (d *WorkspaceID) MarhsalJSON() ([]byte, error) {
	if d.IsNilRef() {
		return nil, nil
	}
	return json.Marshal(d.String())
}

// UnmarhsalJSON implements json.Unmarshaler interface
func (d *WorkspaceID) UnmarhsalJSON(bs []byte) (err error) {
	var idstr string
	if err = json.Unmarshal(bs, &idstr); err != nil {
		return
	}
	*d, err = WorkspaceIDFrom(idstr)
	return
}

// MarshalText implements encoding.TextMarshaler interface
func (d *WorkspaceID) MarshalText() ([]byte, error) {
	if d.IsNilRef() {
		return nil, nil
	}
	return []byte(d.String()), nil
}

// UnmarshalText implements encoding.TextUnmarshaler interface
func (d *WorkspaceID) UnmarshalText(text []byte) (err error) {
	*d, err = WorkspaceIDFrom(string(text))
	return
}

// IsNil returns true if a ID is zero-value
func (d WorkspaceID) IsNil() bool {
	return ID(d).IsNil()
}

// IsNilRef returns true if a ID is nil or zero-value
func (d *WorkspaceID) IsNilRef() bool {
	return d == nil || ID(*d).IsNil()
}

// WorkspaceIDsToStrings converts IDs into a string slice.
func WorkspaceIDsToStrings(ids []WorkspaceID) []string {
	strs := make([]string, 0, len(ids))
	for _, i := range ids {
		strs = append(strs, i.String())
	}
	return strs
}

// WorkspaceIDsFrom converts a string slice into a ID slice.
func WorkspaceIDsFrom(ids []string) ([]WorkspaceID, error) {
	dids := make([]WorkspaceID, 0, len(ids))
	for _, i := range ids {
		did, err := WorkspaceIDFrom(i)
		if err != nil {
			return nil, err
		}
		dids = append(dids, did)
	}
	return dids, nil
}

// WorkspaceIDsFromID converts a generic ID slice into a ID slice.
func WorkspaceIDsFromID(ids []ID) []WorkspaceID {
	dids := make([]WorkspaceID, 0, len(ids))
	for _, i := range ids {
		dids = append(dids, WorkspaceID(i))
	}
	return dids
}

// WorkspaceIDsFromIDRef converts a ref of a generic ID slice into a ID slice.
func WorkspaceIDsFromIDRef(ids []*ID) []WorkspaceID {
	dids := make([]WorkspaceID, 0, len(ids))
	for _, i := range ids {
		if i != nil {
			dids = append(dids, WorkspaceID(*i))
		}
	}
	return dids
}

// WorkspaceIDsToID converts a ID slice into a generic ID slice.
func WorkspaceIDsToID(ids []WorkspaceID) []ID {
	dids := make([]ID, 0, len(ids))
	for _, i := range ids {
		dids = append(dids, i.ID())
	}
	return dids
}

// WorkspaceIDsToIDRef converts a ID ref slice into a generic ID ref slice.
func WorkspaceIDsToIDRef(ids []*WorkspaceID) []*ID {
	dids := make([]*ID, 0, len(ids))
	for _, i := range ids {
		dids = append(dids, i.IDRef())
	}
	return dids
}

// WorkspaceIDSet represents a set of WorkspaceIDs
type WorkspaceIDSet struct {
	m map[WorkspaceID]struct{}
	s []WorkspaceID
}

// NewWorkspaceIDSet creates a new WorkspaceIDSet
func NewWorkspaceIDSet() *WorkspaceIDSet {
	return &WorkspaceIDSet{}
}

// Add adds a new ID if it does not exists in the set
func (s *WorkspaceIDSet) Add(p ...WorkspaceID) {
	if s == nil || p == nil {
		return
	}
	if s.m == nil {
		s.m = map[WorkspaceID]struct{}{}
	}
	for _, i := range p {
		if _, ok := s.m[i]; !ok {
			if s.s == nil {
				s.s = []WorkspaceID{}
			}
			s.m[i] = struct{}{}
			s.s = append(s.s, i)
		}
	}
}

// AddRef adds a new ID ref if it does not exists in the set
func (s *WorkspaceIDSet) AddRef(p *WorkspaceID) {
	if s == nil || p == nil {
		return
	}
	s.Add(*p)
}

// Has checks if the ID exists in the set
func (s *WorkspaceIDSet) Has(p WorkspaceID) bool {
	if s == nil || s.m == nil {
		return false
	}
	_, ok := s.m[p]
	return ok
}

// Clear clears all stored IDs
func (s *WorkspaceIDSet) Clear() {
	if s == nil {
		return
	}
	s.m = nil
	s.s = nil
}

// All returns stored all IDs as a slice
func (s *WorkspaceIDSet) All() []WorkspaceID {
	if s == nil {
		return nil
	}
	return append([]WorkspaceID{}, s.s...)
}

// Clone returns a cloned set
func (s *WorkspaceIDSet) Clone() *WorkspaceIDSet {
	if s == nil {
		return NewWorkspaceIDSet()
	}
	s2 := NewWorkspaceIDSet()
	s2.Add(s.s...)
	return s2
}

// Merge returns a merged set
func (s *WorkspaceIDSet) Merge(s2 *WorkspaceIDSet) *WorkspaceIDSet {
	s3 := s.Clone()
	if s2 == nil {
		return s3
	}
	s3.Add(s2.s...)
	return s3
}
