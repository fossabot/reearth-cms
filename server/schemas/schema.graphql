type Schema implements Node {
  id: ID!
  projectId: ID!
  fields: [SchemaField!]!
  titleFieldId: ID
  titleField: SchemaField
  project: Project!
}

type SchemaGroup implements Node {
  id: ID!
  schemaId: ID!
  projectId: ID!
  name: String!
  description: String!
  key: String!
  schema: Schema!
  project: Project!
  fields: [SchemaField!]!
}

# inputs
input CreateSchemaGroupInput {
  projectId: ID!
  name: String
  description: String
  key: String
}

input UpdateSchemaGroupInput {
  schemaGroupId: ID!
  name: String
  description: String
  key: String
}

input DeleteSchemaGroupInput {
  schemaGroupId: ID!
}

# Payloads
type SchemaGroupPayload {
  schemaGroup: SchemaGroup!
}

type DeleteSchemaGroupPayload {
  schemaGroupId: ID!
}

# extend type Query {}

extend type Mutation {
  createSchemaGroup(input: CreateSchemaGroupInput!): SchemaGroupPayload
  updateSchemaGroup(input: UpdateSchemaGroupInput!): SchemaGroupPayload
  deleteSchemaGroup(input: DeleteSchemaGroupInput!): DeleteSchemaGroupPayload
}
