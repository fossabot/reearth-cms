type Item implements Node {
  id: ID!
  schemaID: ID!
  fields: [ItemField!]
}

type ItemField {
  schemaFieldID: ID!
  type: SchemaFiledType!
  value: Any!
}

# Inputs
input ItemFieldInput {
  schemaFieldID: ID!
  type: SchemaFiledType!
  value: Any!
}

input CreateItemInput {
  schemaID: ID!
  fields: [ItemFieldInput!]!
}

input UpdateItemInput {
  itemId: ID!
  fields: [ItemFieldInput!]!
}

input DeleteItemInput {
  itemId: ID!
}

# Payloads
type ItemPayload {
  item: Item!
}

type DeleteItemPayload {
  itemId: ID!
}

#type ItemConnection {
#  edges: [ItemEdge!]!
#  nodes: [Item]!
#  pageInfo: PageInfo!
#  totalCount: Int!
#}
#
#type ItemEdge {
#  cursor: Cursor!
#  node: Item
#}

extend type Query {
  #  items(
  #    schemaID: ID!
  #    first: Int
  #    last: Int
  #    after: Cursor
  #    before: Cursor
  #  ): ItemConnection!
  versionsByItem(itemID: ID!): [VersionValue]
}

extend type Mutation {
  createItem(input: CreateItemInput!): ItemPayload
  updateItem(input: UpdateItemInput!): ItemPayload
  deleteItem(input: DeleteItemInput!): DeleteItemPayload
}
