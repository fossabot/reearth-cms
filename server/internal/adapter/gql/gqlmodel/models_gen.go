// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodel

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type Node interface {
	IsNode()
}

type AddMemberToWorkspaceInput struct {
	WorkspaceID string `json:"workspaceId"`
	UserID      string `json:"userId"`
	Role        Role   `json:"role"`
}

type AddMemberToWorkspacePayload struct {
	Workspace *Workspace `json:"workspace"`
}

type Asset struct {
	ID          string     `json:"id"`
	CreatedAt   time.Time  `json:"createdAt"`
	WorkspaceID string     `json:"workspaceId"`
	Name        string     `json:"name"`
	Size        int64      `json:"size"`
	URL         string     `json:"url"`
	ContentType string     `json:"contentType"`
	Workspace   *Workspace `json:"workspace"`
}

func (Asset) IsNode() {}

type AssetConnection struct {
	Edges      []*AssetEdge `json:"edges"`
	Nodes      []*Asset     `json:"nodes"`
	PageInfo   *PageInfo    `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

type AssetEdge struct {
	Cursor string `json:"cursor"`
	Node   *Asset `json:"node"`
}

type CreateAssetInput struct {
	WorkspaceID string         `json:"workspaceId"`
	File        graphql.Upload `json:"file"`
}

type CreateAssetPayload struct {
	Asset *Asset `json:"asset"`
}

type CreateWorkspaceInput struct {
	Name string `json:"name"`
}

type CreateWorkspacePayload struct {
	Workspace *Workspace `json:"workspace"`
}

type DeleteMeInput struct {
	UserID string `json:"userId"`
}

type DeleteMePayload struct {
	UserID string `json:"userId"`
}

type DeleteWorkspaceInput struct {
	WorkspaceID string `json:"workspaceId"`
}

type DeleteWorkspacePayload struct {
	WorkspaceID string `json:"workspaceId"`
}

type Me struct {
	ID            string       `json:"id"`
	Name          string       `json:"name"`
	Email         string       `json:"email"`
	Lang          string       `json:"lang"`
	Theme         Theme        `json:"theme"`
	MyWorkspaceID string       `json:"myWorkspaceId"`
	Auths         []string     `json:"auths"`
	Workspaces    []*Workspace `json:"workspaces"`
	MyWorkspace   *Workspace   `json:"myWorkspace"`
}

type PageInfo struct {
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
}

type RemoveAssetInput struct {
	AssetID string `json:"assetId"`
}

type RemoveAssetPayload struct {
	AssetID string `json:"assetId"`
}

type RemoveMemberFromWorkspaceInput struct {
	WorkspaceID string `json:"workspaceId"`
	UserID      string `json:"userId"`
}

type RemoveMemberFromWorkspacePayload struct {
	Workspace *Workspace `json:"workspace"`
}

type RemoveMyAuthInput struct {
	Auth string `json:"auth"`
}

type SignupInput struct {
	Lang        *string `json:"lang"`
	Theme       *Theme  `json:"theme"`
	UserID      *string `json:"userId"`
	WorkspaceID *string `json:"workspaceId"`
	Secret      *string `json:"secret"`
}

type SignupPayload struct {
	User      *User      `json:"user"`
	Workspace *Workspace `json:"workspace"`
}

type UpdateMeInput struct {
	Name                 *string `json:"name"`
	Email                *string `json:"email"`
	Lang                 *string `json:"lang"`
	Theme                *Theme  `json:"theme"`
	Password             *string `json:"password"`
	PasswordConfirmation *string `json:"passwordConfirmation"`
}

type UpdateMePayload struct {
	Me *Me `json:"me"`
}

type UpdateMemberOfWorkspaceInput struct {
	WorkspaceID string `json:"workspaceId"`
	UserID      string `json:"userId"`
	Role        Role   `json:"role"`
}

type UpdateMemberOfWorkspacePayload struct {
	Workspace *Workspace `json:"workspace"`
}

type UpdateWorkspaceInput struct {
	WorkspaceID string `json:"workspaceId"`
	Name        string `json:"name"`
}

type UpdateWorkspacePayload struct {
	Workspace *Workspace `json:"workspace"`
}

type User struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (User) IsNode() {}

type Workspace struct {
	ID       string             `json:"id"`
	Name     string             `json:"name"`
	Members  []*WorkspaceMember `json:"members"`
	Personal bool               `json:"personal"`
	Assets   *AssetConnection   `json:"assets"`
}

func (Workspace) IsNode() {}

type WorkspaceMember struct {
	UserID string `json:"userId"`
	Role   Role   `json:"role"`
	User   *User  `json:"user"`
}

type AssetSortType string

const (
	AssetSortTypeDate AssetSortType = "DATE"
	AssetSortTypeSize AssetSortType = "SIZE"
	AssetSortTypeName AssetSortType = "NAME"
)

var AllAssetSortType = []AssetSortType{
	AssetSortTypeDate,
	AssetSortTypeSize,
	AssetSortTypeName,
}

func (e AssetSortType) IsValid() bool {
	switch e {
	case AssetSortTypeDate, AssetSortTypeSize, AssetSortTypeName:
		return true
	}
	return false
}

func (e AssetSortType) String() string {
	return string(e)
}

func (e *AssetSortType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AssetSortType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AssetSortType", str)
	}
	return nil
}

func (e AssetSortType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NodeType string

const (
	NodeTypeUser      NodeType = "USER"
	NodeTypeWorkspace NodeType = "WORKSPACE"
)

var AllNodeType = []NodeType{
	NodeTypeUser,
	NodeTypeWorkspace,
}

func (e NodeType) IsValid() bool {
	switch e {
	case NodeTypeUser, NodeTypeWorkspace:
		return true
	}
	return false
}

func (e NodeType) String() string {
	return string(e)
}

func (e *NodeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NodeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NodeType", str)
	}
	return nil
}

func (e NodeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleReader Role = "READER"
	RoleWriter Role = "WRITER"
	RoleOwner  Role = "OWNER"
)

var AllRole = []Role{
	RoleReader,
	RoleWriter,
	RoleOwner,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleReader, RoleWriter, RoleOwner:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Theme string

const (
	ThemeDefault Theme = "DEFAULT"
	ThemeLight   Theme = "LIGHT"
	ThemeDark    Theme = "DARK"
)

var AllTheme = []Theme{
	ThemeDefault,
	ThemeLight,
	ThemeDark,
}

func (e Theme) IsValid() bool {
	switch e {
	case ThemeDefault, ThemeLight, ThemeDark:
		return true
	}
	return false
}

func (e Theme) String() string {
	return string(e)
}

func (e *Theme) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Theme(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Theme", str)
	}
	return nil
}

func (e Theme) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
