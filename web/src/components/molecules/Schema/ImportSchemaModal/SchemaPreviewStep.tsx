import styled from "@emotion/styled";
import ReactDragListView from "react-drag-listview";

import Button from "@reearth-cms/components/atoms/Button";
import Col from "@reearth-cms/components/atoms/Col";
import Icon from "@reearth-cms/components/atoms/Icon";
import List from "@reearth-cms/components/atoms/List";
import Row from "@reearth-cms/components/atoms/Row";
import Select from "@reearth-cms/components/atoms/Select";
import Tag from "@reearth-cms/components/atoms/Tag";

import { Field, FieldType } from "../types";

type Props = {
  fields: Field[];
  fieldTypeOptions: { value: string; label: JSX.Element }[];
  onDragEnd: (fromIndex: number, toIndex: number) => void;
  onFieldTypeChange: (id: string, value: FieldType) => void;
  onFieldDelete: (id: string, name: string) => void;
  hasUpdateRight: boolean;
  hasDeleteRight: boolean;
  t: (key: string) => string;
};

const SchemaPreviewStep: React.FC<Props> = ({
  fields,
  fieldTypeOptions,
  onDragEnd,
  onFieldTypeChange,
  onFieldDelete,
  hasUpdateRight,
  hasDeleteRight,
  t,
}) => (
  <>
    <div style={{ marginTop: 24 }}>
      <h3>{t("Schema preview")}</h3>
      <p style={{ color: "rgba(0, 0, 0, 0.45)" }}>
        {t(
          "Here is the schema generated by your file. Please confirm the type of each field. If it does not match your expectations, you can modify the field type.",
        )}
      </p>
    </div>
    <ReactDragListView
      nodeSelector=".ant-list-item"
      handleSelector=".grabbable"
      lineClassName="dragLine"
      onDragEnd={onDragEnd}>
      <FieldStyledList
        itemLayout="horizontal"
        header={
          <Row style={{ padding: "0 24px", color: "rgba(0, 0, 0, 0.45)" }}>
            <Col span={1} />
            <Col span={11} style={{ textAlign: "left" }}>
              <span>Field Name</span>
            </Col>
            <Col span={11} style={{ textAlign: "left" }}>
              <span>Field Type</span>
            </Col>
            <Col span={1} />
          </Row>
        }>
        {fields?.map((item, index) => (
          <List.Item className="draggable-item" key={index}>
            <List.Item.Meta
              title={
                <Row>
                  <Col span={1}>
                    <FieldThumbnail>
                      {hasUpdateRight && <DragIcon icon="menu" className="grabbable" />}
                    </FieldThumbnail>
                  </Col>
                  <Col span={11} style={{ textAlign: "left" }}>
                    <ItemTitle>
                      <ItemTitleHeading>{item.title}</ItemTitleHeading>
                      {item.required ? " *" : ""}
                      <ItemKey>#{item.key}</ItemKey>
                      {item.unique ? <ItemUnique>({t("unique")})</ItemUnique> : ""}
                      {item.isTitle ? <ItemTitleTag>{t("Title")}</ItemTitleTag> : ""}
                    </ItemTitle>
                  </Col>
                  <Col span={11} style={{ textAlign: "left" }}>
                    <Select
                      value={item.type}
                      style={{ width: 176 }}
                      onChange={value => onFieldTypeChange(item.id, value)}
                      options={fieldTypeOptions}
                    />
                  </Col>
                  <Col span={1}>
                    <Button
                      type="text"
                      shape="circle"
                      size="small"
                      onClick={() => onFieldDelete(item.id, item.title)}
                      icon={<Icon icon="delete" color="#8c8c8c" />}
                      disabled={!hasDeleteRight}
                    />
                  </Col>
                </Row>
              }
            />
          </List.Item>
        ))}
      </FieldStyledList>
    </ReactDragListView>
  </>
);

export default SchemaPreviewStep;

const FieldStyledList = styled(List)`
  .ant-list-empty-text {
    display: none;
  }
  .ant-list-item {
    background-color: #fff;
    padding: 12px 24px;
    .ant-list-item-meta {
      .ant-list-item-meta-content {
        text-align: center;
        margin: auto;
      }
      .ant-list-item-meta-title {
        margin: 0;
      }
      align-items: center;
    }
    .ant-list-item-action > li {
      padding: 0 3px;
    }
  }
`;

const FieldThumbnail = styled.div`
  display: flex;
  align-items: center;
  h3 {
    margin: 0;
    margin-left: 12px;
    font-weight: 400;
    font-size: 14px;
    line-height: 22px;
    color: rgba(0, 0, 0, 0.45);
  }
`;

const ItemTitle = styled.p`
  color: rgba(0, 0, 0, 0.85);
  margin: 0;
  display: flex;
  justify-content: start;
`;

const ItemTitleHeading = styled.span`
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
`;

const ItemKey = styled.span`
  margin-left: 4px;
  color: rgba(0, 0, 0, 0.45);
  font-weight: 400;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
`;

const ItemUnique = styled.span`
  margin-left: 4px;
  color: rgba(0, 0, 0, 0.45);
  font-weight: 400;
`;

const ItemTitleTag = styled(Tag)`
  margin-left: 4px;
  color: rgba(0, 0, 0, 0.45);
  background-color: #fafafa;
`;

const DragIcon = styled(Icon)`
  margin-right: 16px;
  cursor: grab;
  :active {
    cursor: grabbing;
  }
`;
